import discord
from discord.ext import commands
import openai
import aiohttp
from datetime import datetime
import asyncio
import json
from typing import Optional

# Configuration
with open('config.json') as f:
    config = json.load(f)

DISCORD_TOKEN = config['discord_token']
OPENAI_API_KEY = config['openai_api_key']
SEARCH_API_KEY = config.get('search_api_key', '')  # For web searches (Google or Bing)
SEARCH_ENGINE_ID = config.get('search_engine_id', '')

# Initialize bot with enhanced intents
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)
openai.api_key = OPENAI_API_KEY

# Conversation history storage
conversation_histories = {}

# Web search function
async def web_search(query: str, num_results: int = 3) -> list:
    """Perform a web search and return relevant results."""
    if not SEARCH_API_KEY or not SEARCH_ENGINE_ID:
        return []
    
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        'key': SEARCH_API_KEY,
        'cx': SEARCH_ENGINE_ID,
        'q': query,
        'num': num_results
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return data.get('items', [])
            return []

def format_search_results(results: list) -> str:
    """Format web search results into a readable string."""
    if not results:
        return ""
    
    formatted = []
    for i, result in enumerate(results[:3], 1):
        title = result.get('title', 'No title')
        snippet = result.get('snippet', 'No description')
        link = result.get('link', '#')
        formatted.append(f"{i}. **{title}**\n   {snippet}\n   {link}\n")
    
    return "\n".join(formatted)

async def get_ai_response(prompt: str, conversation_history: list, use_web: bool = False) -> str:
    """Get response from OpenAI with optional web augmentation."""
    # Check if we need to do a web search
    needs_search = False
    if use_web:
        # Simple heuristic to determine if a search might be helpful
        search_triggers = [
            "current", "recent", "latest", "today's", "202", 
            "news about", "update on", "who is", "what is", 
            "when did", "where is", "how to"
        ]
        needs_search = any(trigger in prompt.lower() for trigger in search_triggers)
    
    web_results = ""
    if needs_search:
        search_query = prompt[:150]  # Limit query length
        search_results = await web_search(search_query)
        if search_results:
            web_results = f"\n\n[Web Search Results]:\n{format_search_results(search_results)}"
    
    # Prepare messages for OpenAI API
    messages = [
        {
            "role": "system",
            "content": (
                "You are a highly intelligent, friendly, and engaging AI assistant named Nexus. "
                "You're running as a Discord bot with the ability to access web search when needed. "
                "You have a conversational, slightly informal tone but remain professional. "
                "You can discuss a wide range of topics, answer questions, and hold natural conversations. "
                "When presenting facts, try to be accurate and provide sources when possible. "
                "If you're using web search results, mention that you looked them up. "
                "Keep responses concise but detailed enough to be helpful (1-3 paragraphs max)."
            )
        }
    ]
    
    # Add conversation history
    messages.extend(conversation_history[-6:])  # Keep last 6 messages for context
    
    # Add current prompt with optional web results
    current_prompt = prompt
    if web_results:
        current_prompt += f"\n\nHere's some potentially relevant web information:{web_results}"
    
    messages.append({"role": "user", "content": current_prompt})
    
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=messages,
            temperature=0.7,
            max_tokens=1000,
            top_p=0.9,
            frequency_penalty=0.5,
            presence_penalty=0.5
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        print(f"Error getting AI response: {e}")
        return "Sorry, I encountered an error processing your request. Please try again later."

def cleanup_conversation_history(history: list) -> list:
    """Keep conversation history manageable."""
    # Limit total tokens
    total_tokens = sum(len(msg["content"].split()) for msg in history)
    while total_tokens > 2000 and len(history) > 1:
        removed = history.pop(0)
        total_tokens -= len(removed["content"].split())
    return history

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name} ({bot.user.id})')
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.listening,
        name="your questions"
    ))

@bot.command(name='chat', aliases=['ask', 'nexus'])
async def chat_command(ctx, *, prompt: str):
    """Main chat command that handles conversations."""
    # Get or initialize conversation history
    user_id = ctx.author.id
    if user_id not in conversation_histories:
        conversation_histories[user_id] = []
    
    # Show typing indicator while processing
    async with ctx.typing():
        # Get AI response
        response = await get_ai_response(
            prompt,
            conversation_histories[user_id],
            use_web=True
        )
        
        # Update conversation history
        conversation_histories[user_id].extend([
            {"role": "user", "content": prompt},
            {"role": "assistant", "content": response}
        ])
        
        # Clean up history
        conversation_histories[user_id] = cleanup_conversation_history(
            conversation_histories[user_id]
        )
        
        # Send response (in chunks if too long)
        if len(response) <= 2000:
            await ctx.send(response)
        else:
            chunks = [response[i:i+2000] for i in range(0, len(response), 2000)]
            for chunk in chunks:
                await ctx.send(chunk)
                await asyncio.sleep(1)

@bot.command(name='reset')
async def reset_command(ctx):
    """Reset the conversation history."""
    user_id = ctx.author.id
    if user_id in conversation_histories:
        del conversation_histories[user_id]
    await ctx.send("Conversation history cleared. Let's start fresh!")

@bot.command(name='info')
async def info_command(ctx):
    """Show information about the bot."""
    embed = discord.Embed(
        title="Nexus AI Assistant",
        description="A smart ChatGPT-like AI for Discord with web-enhanced knowledge",
        color=discord.Color.blue()
    )
    embed.add_field(name="Commands", value="!chat/!ask/!nexus - Talk to the AI\n!reset - Clear conversation history\n!info - Show this info")
    embed.add_field(name="Capabilities", value="• Natural conversations\n• Web-enhanced answers\n• Context-aware responses\n• Question answering")
    embed.set_footer(text=f"Requested by {ctx.author.display_name}")
    await ctx.send(embed=embed)

@bot.event
async def on_message(message):
    # Don't respond to ourselves or other bots
    if message.author == bot.user or message.author.bot:
        return
    
    # Check if bot is mentioned (for mobile-friendly triggering)
    if bot.user.mentioned_in(message) and not message.mention_everyone:
        # Extract the message content without the mention
        prompt = message.content.replace(f'<@{bot.user.id}>', '').strip()
        if prompt:  # Only respond if there's actual content
            ctx = await bot.get_context(message)
            await chat_command(ctx, prompt=prompt)
            return
    
    # Process commands
    await bot.process_commands(message)

if __name__ == '__main__':
    bot.run(DISCORD_TOKEN)